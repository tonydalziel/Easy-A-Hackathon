/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"ChAiN","structs":{},"methods":[{"name":"openListing","desc":"Opens a new listing with target wallet and amount","args":[{"name":"targetWallet","type":"string"},{"name":"targetAmount","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"processPayment","desc":"Processes incoming payments and checks if listing should close","args":[{"name":"sender","type":"string"},{"name":"amount","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getListingStatus","desc":"Gets current listing status","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"closeListing","desc":"Manually close listing (emergency function)","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getListingDetails","desc":"Get listing details (for debugging/info)","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":1,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"listingOpen":{"key":"bGlzdGluZ09wZW4=","keyType":"AVMString","valueType":"AVMUint64"},"receivedAmount":{"key":"cmVjZWl2ZWRBbW91bnQ=","keyType":"AVMString","valueType":"AVMBytes"},"targetAmount":{"key":"dGFyZ2V0QW1vdW50","keyType":"AVMString","valueType":"AVMBytes"},"targetWallet":{"key":"dGFyZ2V0V2FsbGV0","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ChAiN contract
 */
export type ChAiNArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'openListing(string,string)string': {
      targetWallet: string
      targetAmount: string
    }
    'processPayment(string,string)string': {
      sender: string
      amount: string
    }
    'getListingStatus()string': Record<string, never>
    'closeListing()string': Record<string, never>
    'getListingDetails()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'openListing(string,string)string': [targetWallet: string, targetAmount: string]
    'processPayment(string,string)string': [sender: string, amount: string]
    'getListingStatus()string': []
    'closeListing()string': []
    'getListingDetails()string': []
  }
}

/**
 * The return type for each method
 */
export type ChAiNReturns = {
  'openListing(string,string)string': string
  'processPayment(string,string)string': string
  'getListingStatus()string': string
  'closeListing()string': string
  'getListingDetails()string': string
}

/**
 * Defines the types of available calls and state of the ChAiN smart contract.
 */
export type ChAiNTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'openListing(string,string)string' | 'openListing', {
      argsObj: ChAiNArgs['obj']['openListing(string,string)string']
      argsTuple: ChAiNArgs['tuple']['openListing(string,string)string']
      returns: ChAiNReturns['openListing(string,string)string']
    }>
    & Record<'processPayment(string,string)string' | 'processPayment', {
      argsObj: ChAiNArgs['obj']['processPayment(string,string)string']
      argsTuple: ChAiNArgs['tuple']['processPayment(string,string)string']
      returns: ChAiNReturns['processPayment(string,string)string']
    }>
    & Record<'getListingStatus()string' | 'getListingStatus', {
      argsObj: ChAiNArgs['obj']['getListingStatus()string']
      argsTuple: ChAiNArgs['tuple']['getListingStatus()string']
      returns: ChAiNReturns['getListingStatus()string']
    }>
    & Record<'closeListing()string' | 'closeListing', {
      argsObj: ChAiNArgs['obj']['closeListing()string']
      argsTuple: ChAiNArgs['tuple']['closeListing()string']
      returns: ChAiNReturns['closeListing()string']
    }>
    & Record<'getListingDetails()string' | 'getListingDetails', {
      argsObj: ChAiNArgs['obj']['getListingDetails()string']
      argsTuple: ChAiNArgs['tuple']['getListingDetails()string']
      returns: ChAiNReturns['getListingDetails()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        listingOpen: bigint
        receivedAmount: BinaryState
        targetAmount: BinaryState
        targetWallet: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ChAiNSignatures = keyof ChAiNTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ChAiNNonVoidMethodSignatures = keyof ChAiNTypes['methods'] extends infer T ? T extends keyof ChAiNTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ChAiN smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ChAiNSignatures> = ChAiNTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ChAiN smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ChAiNSignatures> = ChAiNTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ChAiNTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ChAiNCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ChAiNDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ChAiNCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ChAiN smart contract
 */
export abstract class ChAiNParamsFactory {
  /**
   * Constructs a no op call for the openListing(string,string)string ABI method
   *
   * Opens a new listing with target wallet and amount
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static openListing(params: CallParams<ChAiNArgs['obj']['openListing(string,string)string'] | ChAiNArgs['tuple']['openListing(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'openListing(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.targetWallet, params.args.targetAmount],
    }
  }
  /**
   * Constructs a no op call for the processPayment(string,string)string ABI method
   *
   * Processes incoming payments and checks if listing should close
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static processPayment(params: CallParams<ChAiNArgs['obj']['processPayment(string,string)string'] | ChAiNArgs['tuple']['processPayment(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'processPayment(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getListingStatus()string ABI method
   *
   * Gets current listing status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getListingStatus(params: CallParams<ChAiNArgs['obj']['getListingStatus()string'] | ChAiNArgs['tuple']['getListingStatus()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getListingStatus()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the closeListing()string ABI method
   *
   * Manually close listing (emergency function)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static closeListing(params: CallParams<ChAiNArgs['obj']['closeListing()string'] | ChAiNArgs['tuple']['closeListing()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'closeListing()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getListingDetails()string ABI method
   *
   * Get listing details (for debugging/info)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getListingDetails(params: CallParams<ChAiNArgs['obj']['getListingDetails()string'] | ChAiNArgs['tuple']['getListingDetails()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getListingDetails()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ChAiN smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ChAiNFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ChAiNFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ChAiNClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ChAiNClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ChAiN smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ChAiNDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ChAiNClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ChAiN smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ChAiN smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ChAiN smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ChAiNClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ChAiN smart contract
 */
export class ChAiNClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ChAiNClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ChAiN app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ChAiNClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ChAiNNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ChAiNClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ChAiNClient> {
    return new ChAiNClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ChAiNClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ChAiNClient> {
    return new ChAiNClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ChAiN smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ChAiN smart contract using the `openListing(string,string)string` ABI method.
     *
     * Opens a new listing with target wallet and amount
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    openListing: (params: CallParams<ChAiNArgs['obj']['openListing(string,string)string'] | ChAiNArgs['tuple']['openListing(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ChAiNParamsFactory.openListing(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `processPayment(string,string)string` ABI method.
     *
     * Processes incoming payments and checks if listing should close
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    processPayment: (params: CallParams<ChAiNArgs['obj']['processPayment(string,string)string'] | ChAiNArgs['tuple']['processPayment(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ChAiNParamsFactory.processPayment(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `getListingStatus()string` ABI method.
     *
     * Gets current listing status
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getListingStatus: (params: CallParams<ChAiNArgs['obj']['getListingStatus()string'] | ChAiNArgs['tuple']['getListingStatus()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ChAiNParamsFactory.getListingStatus(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `closeListing()string` ABI method.
     *
     * Manually close listing (emergency function)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    closeListing: (params: CallParams<ChAiNArgs['obj']['closeListing()string'] | ChAiNArgs['tuple']['closeListing()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ChAiNParamsFactory.closeListing(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `getListingDetails()string` ABI method.
     *
     * Get listing details (for debugging/info)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getListingDetails: (params: CallParams<ChAiNArgs['obj']['getListingDetails()string'] | ChAiNArgs['tuple']['getListingDetails()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ChAiNParamsFactory.getListingDetails(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ChAiN smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ChAiN smart contract using the `openListing(string,string)string` ABI method.
     *
     * Opens a new listing with target wallet and amount
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    openListing: (params: CallParams<ChAiNArgs['obj']['openListing(string,string)string'] | ChAiNArgs['tuple']['openListing(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ChAiNParamsFactory.openListing(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `processPayment(string,string)string` ABI method.
     *
     * Processes incoming payments and checks if listing should close
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    processPayment: (params: CallParams<ChAiNArgs['obj']['processPayment(string,string)string'] | ChAiNArgs['tuple']['processPayment(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ChAiNParamsFactory.processPayment(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `getListingStatus()string` ABI method.
     *
     * Gets current listing status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getListingStatus: (params: CallParams<ChAiNArgs['obj']['getListingStatus()string'] | ChAiNArgs['tuple']['getListingStatus()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ChAiNParamsFactory.getListingStatus(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `closeListing()string` ABI method.
     *
     * Manually close listing (emergency function)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    closeListing: (params: CallParams<ChAiNArgs['obj']['closeListing()string'] | ChAiNArgs['tuple']['closeListing()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ChAiNParamsFactory.closeListing(params))
    },

    /**
     * Makes a call to the ChAiN smart contract using the `getListingDetails()string` ABI method.
     *
     * Get listing details (for debugging/info)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getListingDetails: (params: CallParams<ChAiNArgs['obj']['getListingDetails()string'] | ChAiNArgs['tuple']['getListingDetails()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ChAiNParamsFactory.getListingDetails(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ChAiN smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ChAiN smart contract using the `openListing(string,string)string` ABI method.
     *
     * Opens a new listing with target wallet and amount
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    openListing: async (params: CallParams<ChAiNArgs['obj']['openListing(string,string)string'] | ChAiNArgs['tuple']['openListing(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ChAiNParamsFactory.openListing(params))
      return {...result, return: result.return as unknown as (undefined | ChAiNReturns['openListing(string,string)string'])}
    },

    /**
     * Makes a call to the ChAiN smart contract using the `processPayment(string,string)string` ABI method.
     *
     * Processes incoming payments and checks if listing should close
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    processPayment: async (params: CallParams<ChAiNArgs['obj']['processPayment(string,string)string'] | ChAiNArgs['tuple']['processPayment(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ChAiNParamsFactory.processPayment(params))
      return {...result, return: result.return as unknown as (undefined | ChAiNReturns['processPayment(string,string)string'])}
    },

    /**
     * Makes a call to the ChAiN smart contract using the `getListingStatus()string` ABI method.
     *
     * Gets current listing status
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getListingStatus: async (params: CallParams<ChAiNArgs['obj']['getListingStatus()string'] | ChAiNArgs['tuple']['getListingStatus()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ChAiNParamsFactory.getListingStatus(params))
      return {...result, return: result.return as unknown as (undefined | ChAiNReturns['getListingStatus()string'])}
    },

    /**
     * Makes a call to the ChAiN smart contract using the `closeListing()string` ABI method.
     *
     * Manually close listing (emergency function)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    closeListing: async (params: CallParams<ChAiNArgs['obj']['closeListing()string'] | ChAiNArgs['tuple']['closeListing()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ChAiNParamsFactory.closeListing(params))
      return {...result, return: result.return as unknown as (undefined | ChAiNReturns['closeListing()string'])}
    },

    /**
     * Makes a call to the ChAiN smart contract using the `getListingDetails()string` ABI method.
     *
     * Get listing details (for debugging/info)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getListingDetails: async (params: CallParams<ChAiNArgs['obj']['getListingDetails()string'] | ChAiNArgs['tuple']['getListingDetails()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ChAiNParamsFactory.getListingDetails(params))
      return {...result, return: result.return as unknown as (undefined | ChAiNReturns['getListingDetails()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ChAiNClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ChAiN app
   */
  state = {
    /**
     * Methods to access global state for the current ChAiN app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          listingOpen: result.listingOpen,
          receivedAmount: new BinaryStateValue(result.receivedAmount),
          targetAmount: new BinaryStateValue(result.targetAmount),
          targetWallet: new BinaryStateValue(result.targetWallet),
        }
      },
      /**
       * Get the current value of the listingOpen key in global state
       */
      listingOpen: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("listingOpen")) as bigint | undefined },
      /**
       * Get the current value of the receivedAmount key in global state
       */
      receivedAmount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("receivedAmount")) as Uint8Array | undefined) },
      /**
       * Get the current value of the targetAmount key in global state
       */
      targetAmount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("targetAmount")) as Uint8Array | undefined) },
      /**
       * Get the current value of the targetWallet key in global state
       */
      targetWallet: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("targetWallet")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): ChAiNComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a openListing(string,string)string method call against the ChAiN contract
       */
      openListing(params: CallParams<ChAiNArgs['obj']['openListing(string,string)string'] | ChAiNArgs['tuple']['openListing(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.openListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('openListing(string,string)string', v))
        return this
      },
      /**
       * Add a processPayment(string,string)string method call against the ChAiN contract
       */
      processPayment(params: CallParams<ChAiNArgs['obj']['processPayment(string,string)string'] | ChAiNArgs['tuple']['processPayment(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.processPayment(params)))
        resultMappers.push((v) => client.decodeReturnValue('processPayment(string,string)string', v))
        return this
      },
      /**
       * Add a getListingStatus()string method call against the ChAiN contract
       */
      getListingStatus(params: CallParams<ChAiNArgs['obj']['getListingStatus()string'] | ChAiNArgs['tuple']['getListingStatus()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getListingStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getListingStatus()string', v))
        return this
      },
      /**
       * Add a closeListing()string method call against the ChAiN contract
       */
      closeListing(params: CallParams<ChAiNArgs['obj']['closeListing()string'] | ChAiNArgs['tuple']['closeListing()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('closeListing()string', v))
        return this
      },
      /**
       * Add a getListingDetails()string method call against the ChAiN contract
       */
      getListingDetails(params: CallParams<ChAiNArgs['obj']['getListingDetails()string'] | ChAiNArgs['tuple']['getListingDetails()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getListingDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getListingDetails()string', v))
        return this
      },
      /**
       * Add a clear state call to the ChAiN contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ChAiNComposer
  }
}
export type ChAiNComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the openListing(string,string)string ABI method.
   *
   * Opens a new listing with target wallet and amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  openListing(params?: CallParams<ChAiNArgs['obj']['openListing(string,string)string'] | ChAiNArgs['tuple']['openListing(string,string)string']>): ChAiNComposer<[...TReturns, ChAiNReturns['openListing(string,string)string'] | undefined]>

  /**
   * Calls the processPayment(string,string)string ABI method.
   *
   * Processes incoming payments and checks if listing should close
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  processPayment(params?: CallParams<ChAiNArgs['obj']['processPayment(string,string)string'] | ChAiNArgs['tuple']['processPayment(string,string)string']>): ChAiNComposer<[...TReturns, ChAiNReturns['processPayment(string,string)string'] | undefined]>

  /**
   * Calls the getListingStatus()string ABI method.
   *
   * Gets current listing status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getListingStatus(params?: CallParams<ChAiNArgs['obj']['getListingStatus()string'] | ChAiNArgs['tuple']['getListingStatus()string']>): ChAiNComposer<[...TReturns, ChAiNReturns['getListingStatus()string'] | undefined]>

  /**
   * Calls the closeListing()string ABI method.
   *
   * Manually close listing (emergency function)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  closeListing(params?: CallParams<ChAiNArgs['obj']['closeListing()string'] | ChAiNArgs['tuple']['closeListing()string']>): ChAiNComposer<[...TReturns, ChAiNReturns['closeListing()string'] | undefined]>

  /**
   * Calls the getListingDetails()string ABI method.
   *
   * Get listing details (for debugging/info)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getListingDetails(params?: CallParams<ChAiNArgs['obj']['getListingDetails()string'] | ChAiNArgs['tuple']['getListingDetails()string']>): ChAiNComposer<[...TReturns, ChAiNReturns['getListingDetails()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ChAiN smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ChAiNComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ChAiNComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ChAiNComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ChAiNComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ChAiNComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ChAiNComposerResults<TReturns>>
}
export type ChAiNComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

