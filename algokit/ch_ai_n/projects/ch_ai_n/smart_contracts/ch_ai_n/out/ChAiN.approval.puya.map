{
  "version": 3,
  "sources": [
    "C:/Users/sikor/code/Easy-A-Hackathon/algokit/ch_ai_n/projects/ch_ai_n/smart_contracts/ch_ai_n/contract.algo.ts"
  ],
  "mappings": "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",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"listingOpen\" \"targetAmount\" 0x151f7c75 \"targetWallet\" \"receivedAmount\" \"/\" \"0\" \" microAlgos to \" \" microAlgos\" \"No listing is currently open\""
    },
    "126": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "128": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "131": {
      "op": "pushbytess 0x8aa38c11 0x62014ebf 0xd0bef942 0x7029cc0b 0x234db16b // method \"openListing(string,string)string\", method \"processPayment(string,string)string\", method \"getListingStatus()string\", method \"closeListing()string\", method \"getListingDetails()string\"",
      "defined_out": [
        "Method(closeListing()string)",
        "Method(getListingDetails()string)",
        "Method(getListingStatus()string)",
        "Method(openListing(string,string)string)",
        "Method(processPayment(string,string)string)"
      ],
      "stack_out": [
        "Method(openListing(string,string)string)",
        "Method(processPayment(string,string)string)",
        "Method(getListingStatus()string)",
        "Method(closeListing()string)",
        "Method(getListingDetails()string)"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(closeListing()string)",
        "Method(getListingDetails()string)",
        "Method(getListingStatus()string)",
        "Method(openListing(string,string)string)",
        "Method(processPayment(string,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(openListing(string,string)string)",
        "Method(processPayment(string,string)string)",
        "Method(getListingStatus()string)",
        "Method(closeListing()string)",
        "Method(getListingDetails()string)",
        "tmp%2#0"
      ]
    },
    "161": {
      "op": "match main_openListing_route@3 main_processPayment_route@4 main_getListingStatus_route@5 main_closeListing_route@6 main_getListingDetails_route@7",
      "stack_out": []
    },
    "173": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "return",
      "stack_out": []
    },
    "175": {
      "block": "main_getListingDetails_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "177": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "178": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "181": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "182": {
      "callsub": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.getListingDetails",
      "op": "callsub getListingDetails",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "185": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "186": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length%4#0"
      ]
    },
    "187": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "as_bytes%4#0"
      ]
    },
    "188": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length_uint16%4#0"
      ]
    },
    "191": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%4#0"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "193": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "194": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": []
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_closeListing_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "206": {
      "callsub": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.closeListing",
      "op": "callsub closeListing",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "209": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "210": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "211": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "212": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "217": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "220": {
      "op": "log",
      "stack_out": []
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "op": "return",
      "stack_out": []
    },
    "223": {
      "block": "main_getListingStatus_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "225": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "226": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "227": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "229": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "230": {
      "callsub": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.getListingStatus",
      "op": "callsub getListingStatus",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "233": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "234": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "235": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "236": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "239": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "241": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "244": {
      "op": "log",
      "stack_out": []
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_processPayment_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "257": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "260": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "263": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "266": {
      "callsub": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.processPayment",
      "op": "callsub processPayment",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "269": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "270": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "271": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "272": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "276": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "277": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "280": {
      "op": "log",
      "stack_out": []
    },
    "281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "282": {
      "op": "return",
      "stack_out": []
    },
    "283": {
      "block": "main_openListing_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "285": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "286": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "287": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "289": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "290": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "293": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "299": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "302": {
      "callsub": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.openListing",
      "op": "callsub openListing",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "305": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "306": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "307": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "308": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "312": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "313": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "314": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "315": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "316": {
      "op": "log",
      "stack_out": []
    },
    "317": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "318": {
      "op": "return",
      "stack_out": []
    },
    "319": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "321": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "324": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "326": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "327": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "return",
      "stack_out": []
    },
    "330": {
      "subroutine": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.openListing",
      "params": {
        "targetWallet#0": "bytes",
        "targetAmount#0": "bytes"
      },
      "block": "openListing",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "333": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "334": {
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "335": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "336": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "338": {
      "op": "bz openListing_after_if_else@3",
      "stack_out": []
    },
    "341": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "342": {
      "op": "bytec_0 // \"listingOpen\"",
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "344": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "345": {
      "op": "bz openListing_after_if_else@3",
      "stack_out": []
    },
    "348": {
      "op": "pushbytes \"Error: A listing is already open. Close it first.\"",
      "defined_out": [
        "\"Error: A listing is already open. Close it first.\""
      ],
      "stack_out": [
        "\"Error: A listing is already open. Close it first.\""
      ]
    },
    "399": {
      "retsub": true,
      "op": "retsub"
    },
    "400": {
      "block": "openListing_after_if_else@3",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "targetWallet#0 (copy)"
      ],
      "stack_out": [
        "targetWallet#0 (copy)"
      ]
    },
    "402": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "403": {
      "op": "bnz openListing_after_if_else@5",
      "stack_out": []
    },
    "406": {
      "op": "pushbytes \"Error: Target wallet cannot be empty\"",
      "defined_out": [
        "\"Error: Target wallet cannot be empty\""
      ],
      "stack_out": [
        "\"Error: Target wallet cannot be empty\""
      ]
    },
    "444": {
      "retsub": true,
      "op": "retsub"
    },
    "445": {
      "block": "openListing_after_if_else@5",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "targetAmount#0 (copy)"
      ],
      "stack_out": [
        "targetAmount#0 (copy)"
      ]
    },
    "447": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%1#0"
      ],
      "stack_out": [
        "reinterpret_bool%1#0"
      ]
    },
    "448": {
      "op": "bz openListing_if_body@7",
      "stack_out": []
    },
    "451": {
      "op": "frame_dig -1",
      "stack_out": [
        "targetAmount#0 (copy)"
      ]
    },
    "453": {
      "op": "bytec 6 // \"0\"",
      "defined_out": [
        "\"0\"",
        "targetAmount#0 (copy)"
      ],
      "stack_out": [
        "targetAmount#0 (copy)",
        "\"0\""
      ]
    },
    "455": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "456": {
      "op": "bz openListing_after_if_else@8",
      "stack_out": []
    },
    "459": {
      "block": "openListing_if_body@7",
      "stack_in": [],
      "op": "pushbytes \"Error: Target amount must be greater than 0\"",
      "defined_out": [
        "\"Error: Target amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Error: Target amount must be greater than 0\""
      ]
    },
    "504": {
      "retsub": true,
      "op": "retsub"
    },
    "505": {
      "block": "openListing_after_if_else@8",
      "stack_in": [],
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\""
      ],
      "stack_out": [
        "\"listingOpen\""
      ]
    },
    "506": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"listingOpen\"",
        "1"
      ],
      "stack_out": [
        "\"listingOpen\"",
        "1"
      ]
    },
    "507": {
      "op": "app_global_put",
      "stack_out": []
    },
    "508": {
      "op": "bytec_3 // \"targetWallet\"",
      "defined_out": [
        "\"targetWallet\""
      ],
      "stack_out": [
        "\"targetWallet\""
      ]
    },
    "509": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"targetWallet\"",
        "targetWallet#0 (copy)"
      ],
      "stack_out": [
        "\"targetWallet\"",
        "targetWallet#0 (copy)"
      ]
    },
    "511": {
      "op": "app_global_put",
      "stack_out": []
    },
    "512": {
      "op": "bytec_1 // \"targetAmount\"",
      "defined_out": [
        "\"targetAmount\""
      ],
      "stack_out": [
        "\"targetAmount\""
      ]
    },
    "513": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"targetAmount\"",
        "targetAmount#0 (copy)"
      ],
      "stack_out": [
        "\"targetAmount\"",
        "targetAmount#0 (copy)"
      ]
    },
    "515": {
      "op": "app_global_put",
      "stack_out": []
    },
    "516": {
      "op": "bytec 4 // \"receivedAmount\"",
      "defined_out": [
        "\"receivedAmount\""
      ],
      "stack_out": [
        "\"receivedAmount\""
      ]
    },
    "518": {
      "op": "bytec 6 // \"0\"",
      "defined_out": [
        "\"0\"",
        "\"receivedAmount\""
      ],
      "stack_out": [
        "\"receivedAmount\"",
        "\"0\""
      ]
    },
    "520": {
      "op": "app_global_put",
      "stack_out": []
    },
    "521": {
      "op": "pushbytes \"Listing opened: \"",
      "defined_out": [
        "\"Listing opened: \""
      ],
      "stack_out": [
        "\"Listing opened: \""
      ]
    },
    "539": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"Listing opened: \"",
        "targetAmount#0 (copy)"
      ]
    },
    "541": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "542": {
      "op": "bytec 7 // \" microAlgos to \"",
      "defined_out": [
        "\" microAlgos to \"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\" microAlgos to \""
      ]
    },
    "544": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "545": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "targetWallet#0 (copy)"
      ]
    },
    "547": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "548": {
      "retsub": true,
      "op": "retsub"
    },
    "549": {
      "subroutine": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.processPayment",
      "params": {
        "sender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "processPayment",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "552": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "553": {
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "555": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "557": {
      "op": "bz processPayment_if_body@2",
      "stack_out": []
    },
    "560": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "561": {
      "op": "bytec_0 // \"listingOpen\"",
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "562": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "563": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "564": {
      "op": "bnz processPayment_after_if_else@3",
      "stack_out": []
    },
    "567": {
      "block": "processPayment_if_body@2",
      "stack_in": [],
      "op": "pushbytes \"No active listing to process payment for\"",
      "defined_out": [
        "\"No active listing to process payment for\""
      ],
      "stack_out": [
        "\"No active listing to process payment for\""
      ]
    },
    "609": {
      "retsub": true,
      "op": "retsub"
    },
    "610": {
      "block": "processPayment_after_if_else@3",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "612": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "613": {
      "op": "bnz processPayment_after_if_else@5",
      "stack_out": []
    },
    "616": {
      "op": "pushbytes \"Error: Sender cannot be empty\"",
      "defined_out": [
        "\"Error: Sender cannot be empty\""
      ],
      "stack_out": [
        "\"Error: Sender cannot be empty\""
      ]
    },
    "647": {
      "retsub": true,
      "op": "retsub"
    },
    "648": {
      "block": "processPayment_after_if_else@5",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "650": {
      "op": "len",
      "defined_out": [
        "reinterpret_bool%1#0"
      ],
      "stack_out": [
        "reinterpret_bool%1#0"
      ]
    },
    "651": {
      "op": "bz processPayment_if_body@7",
      "stack_out": []
    },
    "654": {
      "op": "frame_dig -1",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "656": {
      "op": "bytec 6 // \"0\"",
      "defined_out": [
        "\"0\"",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "\"0\""
      ]
    },
    "658": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "bz processPayment_after_if_else@8",
      "stack_out": []
    },
    "662": {
      "block": "processPayment_if_body@7",
      "stack_in": [],
      "op": "pushbytes \"Error: Amount must be greater than 0\"",
      "defined_out": [
        "\"Error: Amount must be greater than 0\""
      ],
      "stack_out": [
        "\"Error: Amount must be greater than 0\""
      ]
    },
    "700": {
      "retsub": true,
      "op": "retsub"
    },
    "701": {
      "block": "processPayment_after_if_else@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "702": {
      "op": "bytec_3 // \"targetWallet\"",
      "defined_out": [
        "\"targetWallet\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"targetWallet\""
      ]
    },
    "703": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "704": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "705": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%2#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "sender#0 (copy)"
      ]
    },
    "707": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "708": {
      "op": "bz processPayment_after_if_else@10",
      "stack_out": []
    },
    "711": {
      "op": "pushbytes \"Payment from \"",
      "defined_out": [
        "\"Payment from \""
      ],
      "stack_out": [
        "\"Payment from \""
      ]
    },
    "726": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"Payment from \"",
        "sender#0 (copy)"
      ]
    },
    "728": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "729": {
      "op": "pushbytes \" not to target wallet \"",
      "defined_out": [
        "\" not to target wallet \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\" not to target wallet \""
      ]
    },
    "753": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "754": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "755": {
      "op": "bytec_3 // \"targetWallet\"",
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"targetWallet\""
      ]
    },
    "756": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "757": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0"
      ]
    },
    "758": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "759": {
      "op": "pushbytes \". Listing remains open.\"",
      "defined_out": [
        "\". Listing remains open.\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\". Listing remains open.\""
      ]
    },
    "784": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "785": {
      "retsub": true,
      "op": "retsub"
    },
    "786": {
      "block": "processPayment_after_if_else@10",
      "stack_in": [],
      "op": "bytec 4 // \"receivedAmount\"",
      "defined_out": [
        "\"receivedAmount\""
      ],
      "stack_out": [
        "\"receivedAmount\""
      ]
    },
    "788": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"receivedAmount\"",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "\"receivedAmount\"",
        "amount#0 (copy)"
      ]
    },
    "790": {
      "op": "app_global_put",
      "stack_out": []
    },
    "791": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "792": {
      "op": "bytec_1 // \"targetAmount\"",
      "defined_out": [
        "\"targetAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"targetAmount\""
      ]
    },
    "793": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "794": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "795": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "797": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "798": {
      "op": "bz processPayment_after_if_else@12",
      "stack_out": []
    },
    "801": {
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\""
      ],
      "stack_out": [
        "\"listingOpen\""
      ]
    },
    "802": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"listingOpen\"",
        "0"
      ]
    },
    "803": {
      "op": "app_global_put",
      "stack_out": []
    },
    "804": {
      "op": "pushbytes \"Listing closed! Target amount reached: \"",
      "defined_out": [
        "\"Listing closed! Target amount reached: \""
      ],
      "stack_out": [
        "\"Listing closed! Target amount reached: \""
      ]
    },
    "845": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"Listing closed! Target amount reached: \"",
        "amount#0 (copy)"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "848": {
      "op": "bytec 5 // \"/\"",
      "defined_out": [
        "\"/\"",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "\"/\""
      ]
    },
    "850": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "851": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "852": {
      "op": "bytec_1 // \"targetAmount\"",
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"targetAmount\""
      ]
    },
    "853": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "854": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%8#0",
        "maybe_value%5#0"
      ]
    },
    "855": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "856": {
      "op": "bytec 8 // \" microAlgos\"",
      "defined_out": [
        "\" microAlgos\"",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "\" microAlgos\""
      ]
    },
    "858": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "859": {
      "retsub": true,
      "op": "retsub"
    },
    "860": {
      "block": "processPayment_after_if_else@12",
      "stack_in": [],
      "op": "pushbytes \"Payment received: \"",
      "defined_out": [
        "\"Payment received: \""
      ],
      "stack_out": [
        "\"Payment received: \""
      ]
    },
    "880": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Payment received: \"",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "\"Payment received: \"",
        "amount#0 (copy)"
      ]
    },
    "882": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "883": {
      "op": "pushbytes \" microAlgos. Progress: \"",
      "defined_out": [
        "\" microAlgos. Progress: \"",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "\" microAlgos. Progress: \""
      ]
    },
    "908": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "909": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "amount#0 (copy)"
      ]
    },
    "911": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "912": {
      "op": "bytec 5 // \"/\"",
      "defined_out": [
        "\"/\"",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "\"/\""
      ]
    },
    "914": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "915": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "916": {
      "op": "bytec_1 // \"targetAmount\"",
      "defined_out": [
        "\"targetAmount\"",
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0",
        "\"targetAmount\""
      ]
    },
    "917": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "918": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%14#0",
        "maybe_value%6#0"
      ]
    },
    "919": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "920": {
      "retsub": true,
      "op": "retsub"
    },
    "921": {
      "subroutine": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.getListingStatus",
      "params": {},
      "block": "getListingStatus",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "922": {
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "923": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "924": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "926": {
      "op": "bz getListingStatus_if_body@2",
      "stack_out": []
    },
    "929": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "930": {
      "op": "bytec_0 // \"listingOpen\"",
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "931": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "932": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "933": {
      "op": "bnz getListingStatus_after_if_else@3",
      "stack_out": []
    },
    "936": {
      "block": "getListingStatus_if_body@2",
      "stack_in": [],
      "op": "bytec 9 // \"No listing is currently open\"",
      "defined_out": [
        "\"No listing is currently open\""
      ],
      "stack_out": [
        "\"No listing is currently open\""
      ]
    },
    "938": {
      "retsub": true,
      "op": "retsub"
    },
    "939": {
      "block": "getListingStatus_after_if_else@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "940": {
      "op": "bytec 4 // \"receivedAmount\"",
      "defined_out": [
        "\"receivedAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"receivedAmount\""
      ]
    },
    "942": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "943": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "944": {
      "op": "pushbytes \"Listing open: \"",
      "defined_out": [
        "\"Listing open: \"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"Listing open: \""
      ]
    },
    "960": {
      "op": "swap",
      "stack_out": [
        "\"Listing open: \"",
        "maybe_value%2#0"
      ]
    },
    "961": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "962": {
      "op": "bytec 5 // \"/\"",
      "defined_out": [
        "\"/\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"/\""
      ]
    },
    "964": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "965": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "966": {
      "op": "bytec_1 // \"targetAmount\"",
      "defined_out": [
        "\"targetAmount\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"targetAmount\""
      ]
    },
    "967": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "968": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "969": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "970": {
      "op": "bytec 7 // \" microAlgos to \"",
      "defined_out": [
        "\" microAlgos to \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\" microAlgos to \""
      ]
    },
    "972": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "973": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "974": {
      "op": "bytec_3 // \"targetWallet\"",
      "defined_out": [
        "\"targetWallet\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"targetWallet\""
      ]
    },
    "975": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "976": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%4#0"
      ]
    },
    "977": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "978": {
      "retsub": true,
      "op": "retsub"
    },
    "979": {
      "subroutine": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.closeListing",
      "params": {},
      "block": "closeListing",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "980": {
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "981": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "982": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "984": {
      "op": "bz closeListing_if_body@2",
      "stack_out": []
    },
    "987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "988": {
      "op": "bytec_0 // \"listingOpen\"",
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "991": {
      "op": "bnz closeListing_after_if_else@3",
      "stack_out": []
    },
    "994": {
      "block": "closeListing_if_body@2",
      "stack_in": [],
      "op": "bytec 9 // \"No listing is currently open\"",
      "defined_out": [
        "\"No listing is currently open\""
      ],
      "stack_out": [
        "\"No listing is currently open\""
      ]
    },
    "996": {
      "retsub": true,
      "op": "retsub"
    },
    "997": {
      "block": "closeListing_after_if_else@3",
      "stack_in": [],
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\""
      ],
      "stack_out": [
        "\"listingOpen\""
      ]
    },
    "998": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"listingOpen\"",
        "0"
      ],
      "stack_out": [
        "\"listingOpen\"",
        "0"
      ]
    },
    "999": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1001": {
      "op": "bytec 4 // \"receivedAmount\"",
      "defined_out": [
        "\"receivedAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"receivedAmount\""
      ]
    },
    "1003": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1004": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1005": {
      "op": "pushbytes \"Listing manually closed. Final amount received: \"",
      "defined_out": [
        "\"Listing manually closed. Final amount received: \"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"Listing manually closed. Final amount received: \""
      ]
    },
    "1055": {
      "op": "swap",
      "stack_out": [
        "\"Listing manually closed. Final amount received: \"",
        "maybe_value%2#0"
      ]
    },
    "1056": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1057": {
      "op": "bytec 5 // \"/\"",
      "defined_out": [
        "\"/\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"/\""
      ]
    },
    "1059": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1060": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1061": {
      "op": "bytec_1 // \"targetAmount\"",
      "defined_out": [
        "\"targetAmount\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"targetAmount\""
      ]
    },
    "1062": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1063": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "1064": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1065": {
      "op": "bytec 8 // \" microAlgos\"",
      "defined_out": [
        "\" microAlgos\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\" microAlgos\""
      ]
    },
    "1067": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1068": {
      "retsub": true,
      "op": "retsub"
    },
    "1069": {
      "subroutine": "smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.getListingDetails",
      "params": {},
      "block": "getListingDetails",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1070": {
      "op": "bytec_0 // \"listingOpen\"",
      "defined_out": [
        "\"listingOpen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "1071": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1072": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1074": {
      "op": "bz getListingDetails_if_body@2",
      "stack_out": []
    },
    "1077": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1078": {
      "op": "bytec_0 // \"listingOpen\"",
      "stack_out": [
        "0",
        "\"listingOpen\""
      ]
    },
    "1079": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1080": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1081": {
      "op": "bnz getListingDetails_after_if_else@3",
      "stack_out": []
    },
    "1084": {
      "block": "getListingDetails_if_body@2",
      "stack_in": [],
      "op": "pushbytes \"No active listing\"",
      "defined_out": [
        "\"No active listing\""
      ],
      "stack_out": [
        "\"No active listing\""
      ]
    },
    "1103": {
      "retsub": true,
      "op": "retsub"
    },
    "1104": {
      "block": "getListingDetails_after_if_else@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1105": {
      "op": "bytec_1 // \"targetAmount\"",
      "defined_out": [
        "\"targetAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"targetAmount\""
      ]
    },
    "1106": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1107": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1108": {
      "op": "pushbytes \"Target: \"",
      "defined_out": [
        "\"Target: \"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"Target: \""
      ]
    },
    "1118": {
      "op": "swap",
      "stack_out": [
        "\"Target: \"",
        "maybe_value%2#0"
      ]
    },
    "1119": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1120": {
      "op": "bytec 7 // \" microAlgos to \"",
      "defined_out": [
        "\" microAlgos to \"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" microAlgos to \""
      ]
    },
    "1122": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1124": {
      "op": "bytec_3 // \"targetWallet\"",
      "defined_out": [
        "\"targetWallet\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"targetWallet\""
      ]
    },
    "1125": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1126": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "1127": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1128": {
      "op": "pushbytes \", Received: \"",
      "defined_out": [
        "\", Received: \"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\", Received: \""
      ]
    },
    "1142": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1143": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1144": {
      "op": "bytec 4 // \"receivedAmount\"",
      "defined_out": [
        "\"receivedAmount\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"receivedAmount\""
      ]
    },
    "1146": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1147": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%4#0"
      ]
    },
    "1148": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1149": {
      "op": "bytec 8 // \" microAlgos\"",
      "defined_out": [
        "\" microAlgos\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\" microAlgos\""
      ]
    },
    "1151": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1152": {
      "retsub": true,
      "op": "retsub"
    }
  }
}