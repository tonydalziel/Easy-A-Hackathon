{
    "hints": {
        "openListing(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "processPayment(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getListingStatus()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "closeListing()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getListingDetails()string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "listingOpen": {
                    "type": "uint64",
                    "key": "listingOpen"
                },
                "receivedAmount": {
                    "type": "bytes",
                    "key": "receivedAmount"
                },
                "targetAmount": {
                    "type": "bytes",
                    "key": "targetAmount"
                },
                "targetWallet": {
                    "type": "bytes",
                    "key": "targetWallet"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ChAiN",
        "methods": [
            {
                "name": "openListing",
                "args": [
                    {
                        "type": "string",
                        "name": "targetWallet"
                    },
                    {
                        "type": "string",
                        "name": "targetAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Opens a new listing with target wallet and amount"
            },
            {
                "name": "processPayment",
                "args": [
                    {
                        "type": "string",
                        "name": "sender"
                    },
                    {
                        "type": "string",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Processes incoming payments and checks if listing should close"
            },
            {
                "name": "getListingStatus",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Gets current listing status"
            },
            {
                "name": "closeListing",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Manually close listing (emergency function)"
            },
            {
                "name": "getListingDetails",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get listing details (for debugging/info)"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}