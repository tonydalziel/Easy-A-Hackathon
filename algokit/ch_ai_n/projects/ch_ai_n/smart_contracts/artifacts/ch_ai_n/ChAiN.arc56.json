{
    "name": "ChAiN",
    "structs": {},
    "methods": [
        {
            "name": "openListing",
            "args": [
                {
                    "type": "account",
                    "name": "targetWallet"
                },
                {
                    "type": "uint64",
                    "name": "targetAmount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opens a new listing with target wallet and amount",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "processPayment",
            "args": [
                {
                    "type": "account",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Processes incoming payments and checks if listing should close",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getListingStatus",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Gets current listing status",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "closeListing",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Manually close listing (emergency function)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getListingDetails",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get listing details (for debugging/info)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "listingOpen": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlzdGluZ09wZW4="
                },
                "targetWallet": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "dGFyZ2V0V2FsbGV0"
                },
                "targetAmount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGFyZ2V0QW1vdW50"
                },
                "receivedAmount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmVjZWl2ZWRBbW91bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        146,
                        170,
                        194,
                        218,
                        252
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        149,
                        173,
                        197,
                        221,
                        255
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        308,
                        410,
                        505,
                        522,
                        532,
                        537,
                        641,
                        674,
                        721
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBgtsaXN0aW5nT3BlbgQVH3x1DnJlY2VpdmVkQW1vdW50DHRhcmdldFdhbGxldAx0YXJnZXRBbW91bnQcTm8gbGlzdGluZyBpcyBjdXJyZW50bHkgb3BlbjEbQQC4ggUE1ODn2gS3Tc1ABNC++UIEcCnMCwQjTbFrNhoAjgUAbABKADIAGgACIkMxGRREMRhEiAItSRUWVwYCTFApTFCwI0MxGRREMRhEiAHmSRUWVwYCTFApTFCwI0MxGRREMRhEiAGtSRUWVwYCTFApTFCwI0MxGRREMRhENhoBF8AcNhoCF4gAoUkVFlcGAkxQKUxQsCNDMRkURDEYRDYaARfAHDYaAheIABlJFRZXBgJMUClMULAjQzEZQP9tMRgURCNDigIBIihlRQFBADsiKGVEQQA0gDFFcnJvcjogQSBsaXN0aW5nIGlzIGFscmVhZHkgb3Blbi4gQ2xvc2UgaXQgZmlyc3QuiSgjZyuL/mcnBIv/ZyoiZ4AOTGlzdGluZyBvcGVuZWSJigIBIihlRQFBAAciKGVEQAArgChObyBhY3RpdmUgbGlzdGluZyB0byBwcm9jZXNzIHBheW1lbnQgZm9yiYv/QAAngCRFcnJvcjogQW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDCJsSIrZUSyB4v/sggjshAisgGzIiplRIv/CCpMZyIqZUQiJwRlRA9BACsoImeAJUxpc3RpbmcgY2xvc2VkISBUYXJnZXQgYW1vdW50IHJlYWNoZWSJgCpQYXltZW50IHJlY2VpdmVkIGFuZCBmb3J3YXJkZWQgdG8gbWVyY2hhbnSJIihlRQFBAAciKGVEQAADJwWJgAxMaXN0aW5nIG9wZW6JIihlRQFBAAciKGVEQAADJwWJKCJngBdMaXN0aW5nIG1hbnVhbGx5IGNsb3NlZIkiKGVFAUEAByIoZURAABSAEU5vIGFjdGl2ZSBsaXN0aW5niYAOQWN0aXZlIGxpc3RpbmeJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}