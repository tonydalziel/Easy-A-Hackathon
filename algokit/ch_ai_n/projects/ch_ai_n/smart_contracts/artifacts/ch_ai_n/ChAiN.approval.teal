#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "listingOpen" 0x151f7c75 "receivedAmount" "targetWallet" "targetAmount" "No listing is currently open"
    // smart_contracts/ch_ai_n/contract.algo.ts:3
    // export class ChAiN extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xd4e0e7da 0xb74dcd40 0xd0bef942 0x7029cc0b 0x234db16b // method "openListing(account,uint64)string", method "processPayment(account,uint64)string", method "getListingStatus()string", method "closeListing()string", method "getListingDetails()string"
    txna ApplicationArgs 0
    match main_openListing_route@3 main_processPayment_route@4 main_getListingStatus_route@5 main_closeListing_route@6 main_getListingDetails_route@7

main_after_if_else@14:
    // smart_contracts/ch_ai_n/contract.algo.ts:3
    // export class ChAiN extends Contract {
    intc_0 // 0
    return

main_getListingDetails_route@7:
    // smart_contracts/ch_ai_n/contract.algo.ts:87
    // public getListingDetails(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getListingDetails
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_closeListing_route@6:
    // smart_contracts/ch_ai_n/contract.algo.ts:75
    // public closeListing(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub closeListing
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getListingStatus_route@5:
    // smart_contracts/ch_ai_n/contract.algo.ts:64
    // public getListingStatus(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getListingStatus
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_processPayment_route@4:
    // smart_contracts/ch_ai_n/contract.algo.ts:31
    // public processPayment(sender: Account, amount: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/ch_ai_n/contract.algo.ts:3
    // export class ChAiN extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/ch_ai_n/contract.algo.ts:31
    // public processPayment(sender: Account, amount: uint64): string {
    callsub processPayment
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_openListing_route@3:
    // smart_contracts/ch_ai_n/contract.algo.ts:13
    // public openListing(targetWallet: Account, targetAmount: uint64): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/ch_ai_n/contract.algo.ts:3
    // export class ChAiN extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/ch_ai_n/contract.algo.ts:13
    // public openListing(targetWallet: Account, targetAmount: uint64): string {
    callsub openListing
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/ch_ai_n/contract.algo.ts:3
    // export class ChAiN extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.openListing(targetWallet: bytes, targetAmount: uint64) -> bytes:
openListing:
    // smart_contracts/ch_ai_n/contract.algo.ts:13
    // public openListing(targetWallet: Account, targetAmount: uint64): string {
    proto 2 1
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:15
    // if (this.listingOpen.hasValue && this.listingOpen.value) {
    app_global_get_ex
    bury 1
    bz openListing_after_if_else@3
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:15
    // if (this.listingOpen.hasValue && this.listingOpen.value) {
    bz openListing_after_if_else@3
    // smart_contracts/ch_ai_n/contract.algo.ts:16
    // return "Error: A listing is already open. Close it first."
    pushbytes "Error: A listing is already open. Close it first."
    retsub

openListing_after_if_else@3:
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:20
    // this.listingOpen.value = true
    intc_1 // 1
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:6
    // private targetWallet = GlobalState<Account>({ key: 'targetWallet' })
    bytec_3 // "targetWallet"
    // smart_contracts/ch_ai_n/contract.algo.ts:21
    // this.targetWallet.value = targetWallet
    frame_dig -2
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:7
    // private targetAmount = GlobalState<uint64>({ key: 'targetAmount' })
    bytec 4 // "targetAmount"
    // smart_contracts/ch_ai_n/contract.algo.ts:22
    // this.targetAmount.value = targetAmount
    frame_dig -1
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:8
    // private receivedAmount = GlobalState<uint64>({ key: 'receivedAmount' })
    bytec_2 // "receivedAmount"
    // smart_contracts/ch_ai_n/contract.algo.ts:23
    // this.receivedAmount.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:25
    // return `Listing opened`
    pushbytes "Listing opened"
    retsub


// smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.processPayment(sender: bytes, amount: uint64) -> bytes:
processPayment:
    // smart_contracts/ch_ai_n/contract.algo.ts:31
    // public processPayment(sender: Account, amount: uint64): string {
    proto 2 1
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:33
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    app_global_get_ex
    bury 1
    bz processPayment_if_body@2
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:33
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    bnz processPayment_after_if_else@3

processPayment_if_body@2:
    // smart_contracts/ch_ai_n/contract.algo.ts:34
    // return "No active listing to process payment for"
    pushbytes "No active listing to process payment for"
    retsub

processPayment_after_if_else@3:
    // smart_contracts/ch_ai_n/contract.algo.ts:38
    // if (amount === 0) {
    frame_dig -1
    bnz processPayment_after_if_else@5
    // smart_contracts/ch_ai_n/contract.algo.ts:39
    // return "Error: Amount must be greater than 0"
    pushbytes "Error: Amount must be greater than 0"
    retsub

processPayment_after_if_else@5:
    // smart_contracts/ch_ai_n/contract.algo.ts:43-47
    // itxn.payment({
    //   amount: amount,
    //   receiver: this.targetWallet.value,
    //   fee: 0, // fee pooling, so the sender of the app call covers the fee
    // }).submit()
    itxn_begin
    // smart_contracts/ch_ai_n/contract.algo.ts:6
    // private targetWallet = GlobalState<Account>({ key: 'targetWallet' })
    intc_0 // 0
    bytec_3 // "targetWallet"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field Receiver
    frame_dig -1
    itxn_field Amount
    // smart_contracts/ch_ai_n/contract.algo.ts:43-47
    // itxn.payment({
    //   amount: amount,
    //   receiver: this.targetWallet.value,
    //   fee: 0, // fee pooling, so the sender of the app call covers the fee
    // }).submit()
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/ch_ai_n/contract.algo.ts:46
    // fee: 0, // fee pooling, so the sender of the app call covers the fee
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/ch_ai_n/contract.algo.ts:43-47
    // itxn.payment({
    //   amount: amount,
    //   receiver: this.targetWallet.value,
    //   fee: 0, // fee pooling, so the sender of the app call covers the fee
    // }).submit()
    itxn_submit
    // smart_contracts/ch_ai_n/contract.algo.ts:8
    // private receivedAmount = GlobalState<uint64>({ key: 'receivedAmount' })
    intc_0 // 0
    bytec_2 // "receivedAmount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:50
    // this.receivedAmount.value = this.receivedAmount.value + amount
    frame_dig -1
    +
    // smart_contracts/ch_ai_n/contract.algo.ts:8
    // private receivedAmount = GlobalState<uint64>({ key: 'receivedAmount' })
    bytec_2 // "receivedAmount"
    // smart_contracts/ch_ai_n/contract.algo.ts:50
    // this.receivedAmount.value = this.receivedAmount.value + amount
    swap
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:8
    // private receivedAmount = GlobalState<uint64>({ key: 'receivedAmount' })
    intc_0 // 0
    bytec_2 // "receivedAmount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:7
    // private targetAmount = GlobalState<uint64>({ key: 'targetAmount' })
    intc_0 // 0
    bytec 4 // "targetAmount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:53
    // if (this.receivedAmount.value >= this.targetAmount.value) {
    >=
    bz processPayment_after_if_else@8
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:54
    // this.listingOpen.value = false
    intc_0 // 0
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:55
    // return `Listing closed! Target amount reached`
    pushbytes "Listing closed! Target amount reached"
    retsub

processPayment_after_if_else@8:
    // smart_contracts/ch_ai_n/contract.algo.ts:58
    // return `Payment received and forwarded to merchant`
    pushbytes "Payment received and forwarded to merchant"
    retsub


// smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.getListingStatus() -> bytes:
getListingStatus:
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:65
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    app_global_get_ex
    bury 1
    bz getListingStatus_if_body@2
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:65
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    bnz getListingStatus_after_if_else@3

getListingStatus_if_body@2:
    // smart_contracts/ch_ai_n/contract.algo.ts:66
    // return "No listing is currently open"
    bytec 5 // "No listing is currently open"
    retsub

getListingStatus_after_if_else@3:
    // smart_contracts/ch_ai_n/contract.algo.ts:69
    // return `Listing open`
    pushbytes "Listing open"
    retsub


// smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.closeListing() -> bytes:
closeListing:
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:76
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    app_global_get_ex
    bury 1
    bz closeListing_if_body@2
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:76
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    bnz closeListing_after_if_else@3

closeListing_if_body@2:
    // smart_contracts/ch_ai_n/contract.algo.ts:77
    // return "No listing is currently open"
    bytec 5 // "No listing is currently open"
    retsub

closeListing_after_if_else@3:
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:80
    // this.listingOpen.value = false
    intc_0 // 0
    app_global_put
    // smart_contracts/ch_ai_n/contract.algo.ts:81
    // return `Listing manually closed`
    pushbytes "Listing manually closed"
    retsub


// smart_contracts/ch_ai_n/contract.algo.ts::ChAiN.getListingDetails() -> bytes:
getListingDetails:
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    // smart_contracts/ch_ai_n/contract.algo.ts:88
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    app_global_get_ex
    bury 1
    bz getListingDetails_if_body@2
    // smart_contracts/ch_ai_n/contract.algo.ts:5
    // private listingOpen = GlobalState<boolean>({ key: 'listingOpen' })
    intc_0 // 0
    bytec_0 // "listingOpen"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/ch_ai_n/contract.algo.ts:88
    // if (!this.listingOpen.hasValue || !this.listingOpen.value) {
    bnz getListingDetails_after_if_else@3

getListingDetails_if_body@2:
    // smart_contracts/ch_ai_n/contract.algo.ts:89
    // return "No active listing"
    pushbytes "No active listing"
    retsub

getListingDetails_after_if_else@3:
    // smart_contracts/ch_ai_n/contract.algo.ts:92
    // return `Active listing`
    pushbytes "Active listing"
    retsub
