{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/lib/tools.ts"],"sourcesContent":["import { Product, PaymentAuthorization } from '@/types';\n\n// Skeleton implementation of product search\nexport async function searchProducts(searchTerms: string[]): Promise<Product[]> {\n  // TODO: Implement actual product search\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  return searchTerms.map((term, index) => ({\n    id: `product-${index}`,\n    name: `${term} - Sample Product`,\n    price: Math.floor(Math.random() * 1000) + 10,\n    vendorId: `vendor-${Math.floor(Math.random() * 5)}`,\n    description: `This is a sample product for ${term}`\n  }));\n}\n\n// Check if payment access is granted for a vendor\nexport async function hasPaymentAccess(amount: number, vendorId: string): Promise<boolean> {\n  // TODO: Implement actual payment access check\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 200));\n\n  // For now, randomly return true/false\n  return Math.random() > 0.5;\n}\n\n// Setup payment authorization for a vendor\nexport async function setupPayment(amount: number, vendorId: string): Promise<PaymentAuthorization> {\n  // TODO: Implement actual payment setup\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  return {\n    vendorId,\n    amount,\n    authorized: false // Will be set to true after user confirmation\n  };\n}\n\n// Make a payment to a vendor\nexport async function makePayment(amount: number, vendorId: string): Promise<{ success: boolean; transactionId?: string; error?: string }> {\n  // TODO: Implement actual cryptocurrency payment\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  const hasAccess = await hasPaymentAccess(amount, vendorId);\n\n  if (!hasAccess) {\n    return {\n      success: false,\n      error: 'Payment access not granted'\n    };\n  }\n\n  return {\n    success: true,\n    transactionId: `txn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  };\n}\n\n// Tool definitions for the LLM\nexport const tools = [\n  {\n    name: 'searchProducts',\n    description: 'Search for products given a list of search terms. Returns products with their prices and vendor IDs.',\n    parameters: {\n      type: 'object',\n      properties: {\n        searchTerms: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'List of product search terms'\n        }\n      },\n      required: ['searchTerms']\n    }\n  },\n  {\n    name: 'hasPaymentAccess',\n    description: 'Check if the agent has access to make a payment to a specific vendor for a given amount.',\n    parameters: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'number',\n          description: 'Payment amount'\n        },\n        vendorId: {\n          type: 'string',\n          description: 'Vendor ID to check payment access for'\n        }\n      },\n      required: ['amount', 'vendorId']\n    }\n  },\n  {\n    name: 'setupPayment',\n    description: 'Request payment authorization from the user. This will show a widget asking the user to grant payment access.',\n    parameters: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'number',\n          description: 'Payment amount to authorize'\n        },\n        vendorId: {\n          type: 'string',\n          description: 'Vendor ID to authorize payments to'\n        }\n      },\n      required: ['amount', 'vendorId']\n    }\n  },\n  {\n    name: 'makePayment',\n    description: 'Make a cryptocurrency payment to a vendor. Requires prior payment authorization.',\n    parameters: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'number',\n          description: 'Payment amount'\n        },\n        vendorId: {\n          type: 'string',\n          description: 'Vendor ID to send payment to'\n        }\n      },\n      required: ['amount', 'vendorId']\n    }\n  }\n];\n"],"names":[],"mappings":";;;;;;;;;;;;AAGO,eAAe,eAAe,WAAqB;IACxD,wCAAwC;IACxC,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,OAAO,YAAY,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;YACvC,IAAI,CAAC,QAAQ,EAAE,OAAO;YACtB,MAAM,GAAG,KAAK,iBAAiB,CAAC;YAChC,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,QAAQ;YAC1C,UAAU,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI;YACnD,aAAa,CAAC,6BAA6B,EAAE,MAAM;QACrD,CAAC;AACH;AAGO,eAAe,iBAAiB,MAAc,EAAE,QAAgB;IACrE,8CAA8C;IAC9C,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,sCAAsC;IACtC,OAAO,KAAK,MAAM,KAAK;AACzB;AAGO,eAAe,aAAa,MAAc,EAAE,QAAgB;IACjE,uCAAuC;IACvC,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,OAAO;QACL;QACA;QACA,YAAY,MAAM,8CAA8C;IAClE;AACF;AAGO,eAAe,YAAY,MAAc,EAAE,QAAgB;IAChE,gDAAgD;IAChD,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,MAAM,YAAY,MAAM,iBAAiB,QAAQ;IAEjD,IAAI,CAAC,WAAW;QACd,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,OAAO;QACL,SAAS;QACT,eAAe,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;IAC/E;AACF;AAGO,MAAM,QAAQ;IACnB;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,aAAa;oBACX,MAAM;oBACN,OAAO;wBAAE,MAAM;oBAAS;oBACxB,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;aAAc;QAC3B;IACF;IACA;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,QAAQ;oBACN,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,MAAM;oBACN,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAU;aAAW;QAClC;IACF;IACA;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,QAAQ;oBACN,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,MAAM;oBACN,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAU;aAAW;QAClC;IACF;IACA;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,QAAQ;oBACN,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,MAAM;oBACN,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAU;aAAW;QAClC;IACF;CACD","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { searchProducts, hasPaymentAccess, setupPayment, makePayment, tools } from '@/lib/tools';\nimport { Message, ToolCall } from '@/types';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { messages, chatId } = await request.json();\n\n    // Get the last user message\n    const lastMessage = messages[messages.length - 1];\n\n    // TODO: Replace this with actual LLM API call\n    // For now, we'll create a simple mock response that demonstrates tool calling\n    const response = await mockLLMResponse(lastMessage.content, messages);\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error in chat API:', error);\n    return NextResponse.json(\n      { error: 'Failed to process chat message' },\n      { status: 500 }\n    );\n  }\n}\n\n// Mock LLM response with tool calling\nasync function mockLLMResponse(userMessage: string, conversationHistory: Message[]) {\n  const lowerMessage = userMessage.toLowerCase();\n\n  // Simple keyword-based tool detection (replace with actual LLM)\n  if (lowerMessage.includes('search') || lowerMessage.includes('find') || lowerMessage.includes('look for')) {\n    // Extract search terms (simple implementation)\n    const searchTerms = extractSearchTerms(userMessage);\n\n    const products = await searchProducts(searchTerms);\n\n    const toolCall: ToolCall = {\n      id: `tool-${Date.now()}`,\n      name: 'searchProducts',\n      arguments: { searchTerms },\n      result: products\n    };\n\n    const responseMessage = `I found ${products.length} products:\\n\\n${products\n      .map(p => `- **${p.name}**: $${p.price} (Vendor: ${p.vendorId})`)\n      .join('\\n')}\\n\\nWould you like to purchase any of these?`;\n\n    return {\n      message: {\n        id: `msg-${Date.now()}`,\n        role: 'assistant',\n        content: responseMessage,\n        timestamp: new Date(),\n        toolCalls: [toolCall]\n      }\n    };\n  }\n\n  if (lowerMessage.includes('buy') || lowerMessage.includes('purchase')) {\n    // Mock payment flow\n    const amount = extractAmount(userMessage) || 100;\n    const vendorId = extractVendorId(userMessage) || 'vendor-0';\n\n    const hasAccess = await hasPaymentAccess(amount, vendorId);\n\n    if (!hasAccess) {\n      const authorization = await setupPayment(amount, vendorId);\n\n      const toolCall: ToolCall = {\n        id: `tool-${Date.now()}`,\n        name: 'setupPayment',\n        arguments: { amount, vendorId },\n        result: authorization\n      };\n\n      return {\n        message: {\n          id: `msg-${Date.now()}`,\n          role: 'assistant',\n          content: `I need your authorization to make this payment of $${amount} to ${vendorId}. Please approve the payment request.`,\n          timestamp: new Date(),\n          toolCalls: [toolCall]\n        },\n        requiresPaymentAuth: true,\n        paymentDetails: { amount, vendorId }\n      };\n    } else {\n      const payment = await makePayment(amount, vendorId);\n\n      const toolCall: ToolCall = {\n        id: `tool-${Date.now()}`,\n        name: 'makePayment',\n        arguments: { amount, vendorId },\n        result: payment\n      };\n\n      return {\n        message: {\n          id: `msg-${Date.now()}`,\n          role: 'assistant',\n          content: payment.success\n            ? `Payment of $${amount} to ${vendorId} was successful! Transaction ID: ${payment.transactionId}`\n            : `Payment failed: ${payment.error}`,\n          timestamp: new Date(),\n          toolCalls: [toolCall]\n        }\n      };\n    }\n  }\n\n  // Default response\n  return {\n    message: {\n      id: `msg-${Date.now()}`,\n      role: 'assistant',\n      content: `I'm a purchasing agent. I can help you:\\n- Search for products\\n- Check prices\\n- Make purchases on your behalf\\n\\nJust ask me to search for something or buy a product!`,\n      timestamp: new Date()\n    }\n  };\n}\n\n// Helper functions to extract information from messages\nfunction extractSearchTerms(message: string): string[] {\n  // Simple extraction - remove common words\n  const words = message\n    .toLowerCase()\n    .replace(/search|find|look for|show me|get me/gi, '')\n    .split(/\\s+/)\n    .filter(word => word.length > 2);\n\n  return words.slice(0, 3); // Take first 3 words as search terms\n}\n\nfunction extractAmount(message: string): number | null {\n  const match = message.match(/\\$?(\\d+(\\.\\d{2})?)/);\n  return match ? parseFloat(match[1]) : null;\n}\n\nfunction extractVendorId(message: string): string | null {\n  const match = message.match(/vendor[:-]?\\s*(\\w+)/i);\n  return match ? match[1] : null;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}