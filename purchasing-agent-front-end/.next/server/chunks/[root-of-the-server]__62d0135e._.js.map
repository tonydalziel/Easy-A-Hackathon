{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/lib/llm.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { Message } from '@/types';\n\n// Initialize OpenAI client with environment variables\nconst API_KEY = process.env.LLM_API_KEY || 'ollama';\nconst BASE_URL = process.env.LLM_API_URL || 'http://127.0.0.1:11434/v1';\nconst MODEL = process.env.LLM_MODEL || 'gemma3';\n\nconsole.log('[LLM] Environment variables:', {\n  LLM_API_URL: process.env.LLM_API_URL,\n  LLM_API_KEY: process.env.LLM_API_KEY,\n  LLM_MODEL: process.env.LLM_MODEL,\n});\n\nconsole.log('[LLM] Using config:', {\n  baseURL: BASE_URL,\n  model: MODEL,\n  apiKey: API_KEY,\n});\n\nconst openai = new OpenAI({\n  apiKey: API_KEY,\n  baseURL: BASE_URL,\n});\n\nexport interface LLMResponse {\n  message: {\n    id: string;\n    role: 'assistant';\n    content: string;\n    timestamp: Date;\n  };\n}\n\n/**\n * Call the LLM with conversation history - simplified version without tool calling\n */\nexport async function callLLM(\n  messages: Message[],\n  userMessage: string\n): Promise<LLMResponse> {\n  try {\n    console.log('[LLM] Starting API call...');\n    console.log(`[LLM] Model: ${MODEL}`);\n    console.log(`[LLM] Base URL: ${process.env.LLM_API_URL}`);\n    console.log(`[LLM] Message count: ${messages.length}`);\n    console.log(`[LLM] User message: \"${userMessage}\"`);\n    \n    // Convert messages to OpenAI format\n    const openAIMessages = messages.map(msg => ({\n      role: msg.role,\n      content: msg.content,\n    }));\n\n    const startTime = Date.now();\n    \n    // Make the API call - simple chat completion without tools\n    const completion = await openai.chat.completions.create({\n      model: MODEL,\n      messages: openAIMessages,\n      temperature: 0.7,\n      max_tokens: 2000,\n    });\n\n    const duration = Date.now() - startTime;\n    console.log(`[LLM] API call completed in ${duration}ms`);\n    console.log(`[LLM] Tokens used - Prompt: ${completion.usage?.prompt_tokens}, Completion: ${completion.usage?.completion_tokens}, Total: ${completion.usage?.total_tokens}`);\n\n    const choice = completion.choices[0];\n    const assistantMessage = choice.message;\n    \n    console.log(`[LLM] Finish reason: ${choice.finish_reason}`);\n    console.log(`[LLM] Response: ${assistantMessage.content?.substring(0, 100)}...`);\n\n    return {\n      message: {\n        id: `msg-${Date.now()}`,\n        role: 'assistant',\n        content:\n          assistantMessage.content ||\n          \"I'm here to help you with your purchasing needs.\",\n        timestamp: new Date(),\n      },\n    };\n  } catch (error) {\n    console.error('[LLM] Error calling LLM:', error);\n    if (error instanceof Error) {\n      console.error('[LLM] Error message:', error.message);\n      console.error('[LLM] Error stack:', error.stack);\n    }\n    throw new Error('Failed to get response from LLM');\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,sDAAsD;AACtD,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC3C,MAAM,WAAW,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC5C,MAAM,QAAQ,QAAQ,GAAG,CAAC,SAAS,IAAI;AAEvC,QAAQ,GAAG,CAAC,gCAAgC;IAC1C,aAAa,QAAQ,GAAG,CAAC,WAAW;IACpC,aAAa,QAAQ,GAAG,CAAC,WAAW;IACpC,WAAW,QAAQ,GAAG,CAAC,SAAS;AAClC;AAEA,QAAQ,GAAG,CAAC,uBAAuB;IACjC,SAAS;IACT,OAAO;IACP,QAAQ;AACV;AAEA,MAAM,SAAS,IAAI,mLAAM,CAAC;IACxB,QAAQ;IACR,SAAS;AACX;AAcO,eAAe,QACpB,QAAmB,EACnB,WAAmB;IAEnB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,OAAO;QACnC,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,QAAQ,GAAG,CAAC,WAAW,EAAE;QACxD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,SAAS,MAAM,EAAE;QACrD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;QAElD,oCAAoC;QACpC,MAAM,iBAAiB,SAAS,GAAG,CAAC,CAAA,MAAO,CAAC;gBAC1C,MAAM,IAAI,IAAI;gBACd,SAAS,IAAI,OAAO;YACtB,CAAC;QAED,MAAM,YAAY,KAAK,GAAG;QAE1B,2DAA2D;QAC3D,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,OAAO;YACP,UAAU;YACV,aAAa;YACb,YAAY;QACd;QAEA,MAAM,WAAW,KAAK,GAAG,KAAK;QAC9B,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,SAAS,EAAE,CAAC;QACvD,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,WAAW,KAAK,EAAE,cAAc,cAAc,EAAE,WAAW,KAAK,EAAE,kBAAkB,SAAS,EAAE,WAAW,KAAK,EAAE,cAAc;QAE1K,MAAM,SAAS,WAAW,OAAO,CAAC,EAAE;QACpC,MAAM,mBAAmB,OAAO,OAAO;QAEvC,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,OAAO,aAAa,EAAE;QAC1D,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,iBAAiB,OAAO,EAAE,UAAU,GAAG,KAAK,GAAG,CAAC;QAE/E,OAAO;YACL,SAAS;gBACP,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI;gBACvB,MAAM;gBACN,SACE,iBAAiB,OAAO,IACxB;gBACF,WAAW,IAAI;YACjB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,wBAAwB,MAAM,OAAO;YACnD,QAAQ,KAAK,CAAC,sBAAsB,MAAM,KAAK;QACjD;QACA,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { callLLM } from '@/lib/llm';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { messages, chatId } = await request.json();\n\n    // Get the last user message\n    const lastMessage = messages[messages.length - 1];\n\n    // Call the actual LLM with conversation history\n    const response = await callLLM(messages, lastMessage.content);\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error in chat API:', error);\n    return NextResponse.json(\n      { error: 'Failed to process chat message' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE/C,4BAA4B;QAC5B,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QAEjD,gDAAgD;QAChD,MAAM,WAAW,MAAM,IAAA,8HAAO,EAAC,UAAU,YAAY,OAAO;QAE5D,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}