{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/lib/tools.ts"],"sourcesContent":["import { Product, PaymentAuthorization } from '@/types';\n\n// Skeleton implementation of product search\nexport async function searchProducts(searchTerms: string[]): Promise<Product[]> {\n  // TODO: Implement actual product search\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  return searchTerms.map((term, index) => ({\n    id: `product-${index}`,\n    name: `${term} - Sample Product`,\n    price: Math.floor(Math.random() * 1000) + 10,\n    vendorId: `vendor-${Math.floor(Math.random() * 5)}`,\n    description: `This is a sample product for ${term}`\n  }));\n}\n\n// Check if payment access is granted for a vendor\nexport async function hasPaymentAccess(amount: number, vendorId: string): Promise<boolean> {\n  // TODO: Implement actual payment access check\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 200));\n\n  // For now, randomly return true/false\n  return Math.random() > 0.5;\n}\n\n// Setup payment authorization for a vendor\nexport async function setupPayment(amount: number, vendorId: string): Promise<PaymentAuthorization> {\n  // TODO: Implement actual payment setup\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  return {\n    vendorId,\n    amount,\n    authorized: false // Will be set to true after user confirmation\n  };\n}\n\n// Make a payment to a vendor\nexport async function makePayment(amount: number, vendorId: string): Promise<{ success: boolean; transactionId?: string; error?: string }> {\n  // TODO: Implement actual cryptocurrency payment\n  // This is a mock implementation\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  const hasAccess = await hasPaymentAccess(amount, vendorId);\n\n  if (!hasAccess) {\n    return {\n      success: false,\n      error: 'Payment access not granted'\n    };\n  }\n\n  return {\n    success: true,\n    transactionId: `txn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  };\n}\n\n// Tool definitions for the LLM\nexport const tools = [\n  {\n    name: 'searchProducts',\n    description: 'Search for products given a list of search terms. Returns products with their prices and vendor IDs.',\n    parameters: {\n      type: 'object',\n      properties: {\n        searchTerms: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'List of product search terms'\n        }\n      },\n      required: ['searchTerms']\n    }\n  },\n  {\n    name: 'hasPaymentAccess',\n    description: 'Check if the agent has access to make a payment to a specific vendor for a given amount.',\n    parameters: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'number',\n          description: 'Payment amount'\n        },\n        vendorId: {\n          type: 'string',\n          description: 'Vendor ID to check payment access for'\n        }\n      },\n      required: ['amount', 'vendorId']\n    }\n  },\n  {\n    name: 'setupPayment',\n    description: 'Request payment authorization from the user. This will show a widget asking the user to grant payment access.',\n    parameters: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'number',\n          description: 'Payment amount to authorize'\n        },\n        vendorId: {\n          type: 'string',\n          description: 'Vendor ID to authorize payments to'\n        }\n      },\n      required: ['amount', 'vendorId']\n    }\n  },\n  {\n    name: 'makePayment',\n    description: 'Make a cryptocurrency payment to a vendor. Requires prior payment authorization.',\n    parameters: {\n      type: 'object',\n      properties: {\n        amount: {\n          type: 'number',\n          description: 'Payment amount'\n        },\n        vendorId: {\n          type: 'string',\n          description: 'Vendor ID to send payment to'\n        }\n      },\n      required: ['amount', 'vendorId']\n    }\n  }\n];\n"],"names":[],"mappings":";;;;;;;;;;;;AAGO,eAAe,eAAe,WAAqB;IACxD,wCAAwC;IACxC,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,OAAO,YAAY,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;YACvC,IAAI,CAAC,QAAQ,EAAE,OAAO;YACtB,MAAM,GAAG,KAAK,iBAAiB,CAAC;YAChC,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,QAAQ;YAC1C,UAAU,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI;YACnD,aAAa,CAAC,6BAA6B,EAAE,MAAM;QACrD,CAAC;AACH;AAGO,eAAe,iBAAiB,MAAc,EAAE,QAAgB;IACrE,8CAA8C;IAC9C,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,sCAAsC;IACtC,OAAO,KAAK,MAAM,KAAK;AACzB;AAGO,eAAe,aAAa,MAAc,EAAE,QAAgB;IACjE,uCAAuC;IACvC,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,OAAO;QACL;QACA;QACA,YAAY,MAAM,8CAA8C;IAClE;AACF;AAGO,eAAe,YAAY,MAAc,EAAE,QAAgB;IAChE,gDAAgD;IAChD,gCAAgC;IAChC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,MAAM,YAAY,MAAM,iBAAiB,QAAQ;IAEjD,IAAI,CAAC,WAAW;QACd,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;IAEA,OAAO;QACL,SAAS;QACT,eAAe,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;IAC/E;AACF;AAGO,MAAM,QAAQ;IACnB;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,aAAa;oBACX,MAAM;oBACN,OAAO;wBAAE,MAAM;oBAAS;oBACxB,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;aAAc;QAC3B;IACF;IACA;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,QAAQ;oBACN,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,MAAM;oBACN,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAU;aAAW;QAClC;IACF;IACA;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,QAAQ;oBACN,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,MAAM;oBACN,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAU;aAAW;QAClC;IACF;IACA;QACE,MAAM;QACN,aAAa;QACb,YAAY;YACV,MAAM;YACN,YAAY;gBACV,QAAQ;oBACN,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,MAAM;oBACN,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAU;aAAW;QAClC;IACF;CACD","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/lib/llm.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { Message, ToolCall } from '@/types';\nimport { tools } from './tools';\n\n// Initialize OpenAI client with environment variables\nconst openai = new OpenAI({\n  apiKey: process.env.LLM_API_KEY || 'ollama',\n  baseURL: process.env.LLM_API_URL || 'http://127.0.0.1:11434/v1',\n});\n\nconst MODEL = process.env.LLM_MODEL || 'gemma2';\n\nconsole.log('[LLM] Initialized with config:', {\n  baseURL: process.env.LLM_API_URL || 'http://127.0.0.1:11434/v1',\n  model: MODEL,\n  hasApiKey: !!(process.env.LLM_API_KEY),\n});\n\nexport interface LLMResponse {\n  message: {\n    id: string;\n    role: 'assistant';\n    content: string;\n    timestamp: Date;\n    toolCalls?: ToolCall[];\n  };\n  requiresPaymentAuth?: boolean;\n  paymentDetails?: {\n    amount: number;\n    vendorId: string;\n  };\n}\n\n/**\n * Call the LLM with conversation history and available tools\n */\nexport async function callLLM(\n  messages: Message[],\n  userMessage: string\n): Promise<LLMResponse> {\n  try {\n    console.log('[LLM] Starting API call...');\n    console.log(`[LLM] Model: ${MODEL}`);\n    console.log(`[LLM] Base URL: ${process.env.LLM_API_URL}`);\n    console.log(`[LLM] Message count: ${messages.length}`);\n    console.log(`[LLM] User message: \"${userMessage}\"`);\n    \n    // Convert messages to OpenAI format\n    const openAIMessages = messages.map(msg => ({\n      role: msg.role,\n      content: msg.content,\n    }));\n\n    console.log(`[LLM] Available tools: ${tools.map(t => t.name).join(', ')}`);\n\n    const startTime = Date.now();\n    \n    // Make the API call with tool definitions\n    const completion = await openai.chat.completions.create({\n      model: MODEL,\n      messages: openAIMessages,\n      tools: tools.map(tool => ({\n        type: 'function' as const,\n        function: {\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.parameters,\n        },\n      })),\n      tool_choice: 'auto',\n    });\n\n    const duration = Date.now() - startTime;\n    console.log(`[LLM] API call completed in ${duration}ms`);\n    console.log(`[LLM] Tokens used - Prompt: ${completion.usage?.prompt_tokens}, Completion: ${completion.usage?.completion_tokens}, Total: ${completion.usage?.total_tokens}`);\n\n    const choice = completion.choices[0];\n    const assistantMessage = choice.message;\n    \n    console.log(`[LLM] Finish reason: ${choice.finish_reason}`);\n\n    // Handle tool calls if present\n    if (assistantMessage.tool_calls && assistantMessage.tool_calls.length > 0) {\n      console.log(`[LLM] Processing ${assistantMessage.tool_calls.length} tool call(s)`);\n      const toolCalls: ToolCall[] = [];\n\n      for (const toolCall of assistantMessage.tool_calls) {\n        if (toolCall.type !== 'function') continue;\n        \n        const functionName = toolCall.function.name;\n        const functionArgs = JSON.parse(toolCall.function.arguments);\n\n        console.log(`[LLM] Executing tool: ${functionName}`);\n        console.log(`[LLM] Tool arguments:`, functionArgs);\n\n        // Execute the tool\n        const result = await executeToolCall(functionName, functionArgs);\n        \n        console.log(`[LLM] Tool ${functionName} completed`);\n        console.log(`[LLM] Tool result:`, result);\n\n        toolCalls.push({\n          id: toolCall.id,\n          name: functionName,\n          arguments: functionArgs,\n          result,\n        });\n      }\n\n      // Check if payment authorization is needed\n      const needsPaymentAuth = toolCalls.some(\n        tc => tc.name === 'setupPayment'\n      );\n\n      if (needsPaymentAuth) {\n        const setupPaymentCall = toolCalls.find(\n          tc => tc.name === 'setupPayment'\n        );\n        console.log('[LLM] Payment authorization required');\n        return {\n          message: {\n            id: `msg-${Date.now()}`,\n            role: 'assistant',\n            content:\n              assistantMessage.content ||\n              `I need your authorization to make this payment of $${setupPaymentCall?.arguments.amount} to ${setupPaymentCall?.arguments.vendorId}. Please approve the payment request.`,\n            timestamp: new Date(),\n            toolCalls,\n          },\n          requiresPaymentAuth: true,\n          paymentDetails: {\n            amount: setupPaymentCall?.arguments.amount || 0,\n            vendorId: setupPaymentCall?.arguments.vendorId || '',\n          },\n        };\n      }\n\n      // If we made tool calls, we need to get the final response from the LLM\n      console.log('[LLM] Making follow-up API call with tool results');\n      const toolResultMessages = toolCalls.map(tc => ({\n        role: 'tool' as const,\n        tool_call_id: tc.id,\n        content: JSON.stringify(tc.result),\n      }));\n\n      const followUpStartTime = Date.now();\n      \n      const finalCompletion = await openai.chat.completions.create({\n        model: MODEL,\n        messages: [\n          ...openAIMessages,\n          {\n            role: 'assistant',\n            content: assistantMessage.content,\n            tool_calls: assistantMessage.tool_calls,\n          },\n          ...toolResultMessages,\n        ],\n      });\n\n      const followUpDuration = Date.now() - followUpStartTime;\n      console.log(`[LLM] Follow-up API call completed in ${followUpDuration}ms`);\n      console.log(`[LLM] Follow-up tokens used - Prompt: ${finalCompletion.usage?.prompt_tokens}, Completion: ${finalCompletion.usage?.completion_tokens}, Total: ${finalCompletion.usage?.total_tokens}`);\n\n      return {\n        message: {\n          id: `msg-${Date.now()}`,\n          role: 'assistant',\n          content:\n            finalCompletion.choices[0].message.content ||\n            'I processed your request.',\n          timestamp: new Date(),\n          toolCalls,\n        },\n      };\n    }\n\n    // No tool calls, just return the message\n    console.log('[LLM] No tool calls, returning direct response');\n    return {\n      message: {\n        id: `msg-${Date.now()}`,\n        role: 'assistant',\n        content:\n          assistantMessage.content ||\n          \"I'm here to help you search for and purchase products.\",\n        timestamp: new Date(),\n      },\n    };\n  } catch (error) {\n    console.error('[LLM] Error calling LLM:', error);\n    if (error instanceof Error) {\n      console.error('[LLM] Error message:', error.message);\n      console.error('[LLM] Error stack:', error.stack);\n    }\n    throw new Error('Failed to get response from LLM');\n  }\n}\n\n/**\n * Execute a tool call based on the function name\n */\nasync function executeToolCall(\n  functionName: string,\n  args: any\n): Promise<any> {\n  console.log(`[LLM] Executing tool function: ${functionName}`);\n  \n  try {\n    switch (functionName) {\n      case 'searchProducts':\n        const { searchProducts } = await import('./tools');\n        return await searchProducts(args.searchTerms);\n\n      case 'hasPaymentAccess':\n        const { hasPaymentAccess } = await import('./tools');\n        return await hasPaymentAccess(args.amount, args.vendorId);\n\n      case 'setupPayment':\n        const { setupPayment } = await import('./tools');\n        return await setupPayment(args.amount, args.vendorId);\n\n      case 'makePayment':\n        const { makePayment } = await import('./tools');\n        return await makePayment(args.amount, args.vendorId);\n\n      default:\n        console.error(`[LLM] Unknown tool requested: ${functionName}`);\n        throw new Error(`Unknown tool: ${functionName}`);\n    }\n  } catch (error) {\n    console.error(`[LLM] Error executing tool ${functionName}:`, error);\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,sDAAsD;AACtD,MAAM,SAAS,IAAI,mLAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,WAAW,IAAI;IACnC,SAAS,QAAQ,GAAG,CAAC,WAAW,IAAI;AACtC;AAEA,MAAM,QAAQ,QAAQ,GAAG,CAAC,SAAS,IAAI;AAEvC,QAAQ,GAAG,CAAC,kCAAkC;IAC5C,SAAS,QAAQ,GAAG,CAAC,WAAW,IAAI;IACpC,OAAO;IACP,WAAW,CAAC,CAAE,QAAQ,GAAG,CAAC,WAAW;AACvC;AAoBO,eAAe,QACpB,QAAmB,EACnB,WAAmB;IAEnB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,OAAO;QACnC,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,QAAQ,GAAG,CAAC,WAAW,EAAE;QACxD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,SAAS,MAAM,EAAE;QACrD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;QAElD,oCAAoC;QACpC,MAAM,iBAAiB,SAAS,GAAG,CAAC,CAAA,MAAO,CAAC;gBAC1C,MAAM,IAAI,IAAI;gBACd,SAAS,IAAI,OAAO;YACtB,CAAC;QAED,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,8HAAK,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO;QAEzE,MAAM,YAAY,KAAK,GAAG;QAE1B,0CAA0C;QAC1C,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,OAAO;YACP,UAAU;YACV,OAAO,8HAAK,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;oBACxB,MAAM;oBACN,UAAU;wBACR,MAAM,KAAK,IAAI;wBACf,aAAa,KAAK,WAAW;wBAC7B,YAAY,KAAK,UAAU;oBAC7B;gBACF,CAAC;YACD,aAAa;QACf;QAEA,MAAM,WAAW,KAAK,GAAG,KAAK;QAC9B,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,SAAS,EAAE,CAAC;QACvD,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,WAAW,KAAK,EAAE,cAAc,cAAc,EAAE,WAAW,KAAK,EAAE,kBAAkB,SAAS,EAAE,WAAW,KAAK,EAAE,cAAc;QAE1K,MAAM,SAAS,WAAW,OAAO,CAAC,EAAE;QACpC,MAAM,mBAAmB,OAAO,OAAO;QAEvC,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,OAAO,aAAa,EAAE;QAE1D,+BAA+B;QAC/B,IAAI,iBAAiB,UAAU,IAAI,iBAAiB,UAAU,CAAC,MAAM,GAAG,GAAG;YACzE,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC;YACjF,MAAM,YAAwB,EAAE;YAEhC,KAAK,MAAM,YAAY,iBAAiB,UAAU,CAAE;gBAClD,IAAI,SAAS,IAAI,KAAK,YAAY;gBAElC,MAAM,eAAe,SAAS,QAAQ,CAAC,IAAI;gBAC3C,MAAM,eAAe,KAAK,KAAK,CAAC,SAAS,QAAQ,CAAC,SAAS;gBAE3D,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,cAAc;gBACnD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,CAAC,EAAE;gBAErC,mBAAmB;gBACnB,MAAM,SAAS,MAAM,gBAAgB,cAAc;gBAEnD,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,aAAa,UAAU,CAAC;gBAClD,QAAQ,GAAG,CAAC,CAAC,kBAAkB,CAAC,EAAE;gBAElC,UAAU,IAAI,CAAC;oBACb,IAAI,SAAS,EAAE;oBACf,MAAM;oBACN,WAAW;oBACX;gBACF;YACF;YAEA,2CAA2C;YAC3C,MAAM,mBAAmB,UAAU,IAAI,CACrC,CAAA,KAAM,GAAG,IAAI,KAAK;YAGpB,IAAI,kBAAkB;gBACpB,MAAM,mBAAmB,UAAU,IAAI,CACrC,CAAA,KAAM,GAAG,IAAI,KAAK;gBAEpB,QAAQ,GAAG,CAAC;gBACZ,OAAO;oBACL,SAAS;wBACP,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI;wBACvB,MAAM;wBACN,SACE,iBAAiB,OAAO,IACxB,CAAC,mDAAmD,EAAE,kBAAkB,UAAU,OAAO,IAAI,EAAE,kBAAkB,UAAU,SAAS,qCAAqC,CAAC;wBAC5K,WAAW,IAAI;wBACf;oBACF;oBACA,qBAAqB;oBACrB,gBAAgB;wBACd,QAAQ,kBAAkB,UAAU,UAAU;wBAC9C,UAAU,kBAAkB,UAAU,YAAY;oBACpD;gBACF;YACF;YAEA,wEAAwE;YACxE,QAAQ,GAAG,CAAC;YACZ,MAAM,qBAAqB,UAAU,GAAG,CAAC,CAAA,KAAM,CAAC;oBAC9C,MAAM;oBACN,cAAc,GAAG,EAAE;oBACnB,SAAS,KAAK,SAAS,CAAC,GAAG,MAAM;gBACnC,CAAC;YAED,MAAM,oBAAoB,KAAK,GAAG;YAElC,MAAM,kBAAkB,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;gBAC3D,OAAO;gBACP,UAAU;uBACL;oBACH;wBACE,MAAM;wBACN,SAAS,iBAAiB,OAAO;wBACjC,YAAY,iBAAiB,UAAU;oBACzC;uBACG;iBACJ;YACH;YAEA,MAAM,mBAAmB,KAAK,GAAG,KAAK;YACtC,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,iBAAiB,EAAE,CAAC;YACzE,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,gBAAgB,KAAK,EAAE,cAAc,cAAc,EAAE,gBAAgB,KAAK,EAAE,kBAAkB,SAAS,EAAE,gBAAgB,KAAK,EAAE,cAAc;YAEnM,OAAO;gBACL,SAAS;oBACP,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI;oBACvB,MAAM;oBACN,SACE,gBAAgB,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,IAC1C;oBACF,WAAW,IAAI;oBACf;gBACF;YACF;QACF;QAEA,yCAAyC;QACzC,QAAQ,GAAG,CAAC;QACZ,OAAO;YACL,SAAS;gBACP,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI;gBACvB,MAAM;gBACN,SACE,iBAAiB,OAAO,IACxB;gBACF,WAAW,IAAI;YACjB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,wBAAwB,MAAM,OAAO;YACnD,QAAQ,KAAK,CAAC,sBAAsB,MAAM,KAAK;QACjD;QACA,MAAM,IAAI,MAAM;IAClB;AACF;AAEA;;CAEC,GACD,eAAe,gBACb,YAAoB,EACpB,IAAS;IAET,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,cAAc;IAE5D,IAAI;QACF,OAAQ;YACN,KAAK;gBACH,MAAM,EAAE,cAAc,EAAE,GAAG;gBAC3B,OAAO,MAAM,eAAe,KAAK,WAAW;YAE9C,KAAK;gBACH,MAAM,EAAE,gBAAgB,EAAE,GAAG;gBAC7B,OAAO,MAAM,iBAAiB,KAAK,MAAM,EAAE,KAAK,QAAQ;YAE1D,KAAK;gBACH,MAAM,EAAE,YAAY,EAAE,GAAG;gBACzB,OAAO,MAAM,aAAa,KAAK,MAAM,EAAE,KAAK,QAAQ;YAEtD,KAAK;gBACH,MAAM,EAAE,WAAW,EAAE,GAAG;gBACxB,OAAO,MAAM,YAAY,KAAK,MAAM,EAAE,KAAK,QAAQ;YAErD;gBACE,QAAQ,KAAK,CAAC,CAAC,8BAA8B,EAAE,cAAc;gBAC7D,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,cAAc;QACnD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,aAAa,CAAC,CAAC,EAAE;QAC7D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///Users/danielpointon/easya/Easy-A-Hackathon/purchasing-agent-front-end/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { callLLM } from '@/lib/llm';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { messages, chatId } = await request.json();\n\n    // Get the last user message\n    const lastMessage = messages[messages.length - 1];\n\n    // Call the actual LLM with conversation history\n    const response = await callLLM(messages, lastMessage.content);\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error in chat API:', error);\n    return NextResponse.json(\n      { error: 'Failed to process chat message' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE/C,4BAA4B;QAC5B,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QAEjD,gDAAgD;QAChD,MAAM,WAAW,MAAM,IAAA,8HAAO,EAAC,UAAU,YAAY,OAAO;QAE5D,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}